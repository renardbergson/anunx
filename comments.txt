============== Comentários referentes à URL para obtenção de imagens randômicas  ==============
"https://source.unsplash.com/random?a"

===================== Comentários referentes às variáveis de ambiente =====================
Componentes client site não têm acesso às variáveis de ambiente comuns, para tornar uma variável
desse tipo acessível de ambos os lados, acrescentamos "NEXT_PUBLIC_" antes do nome que vamos dar
para ela.

============ Comentários referentes ao React Dropzone, presente na page "publish" ============

react dropzone retorna duas funções
use dropzone recebe um objeto
a primeira será passada para a área clicável/arrastável
a segunda será passada para um input, inserido dentro da área clicável/arrastável
a chave "accept" seta: tipo de arquivo/extensão aceitável (neste caso, img de qq extensão)
a chave "onDrop" recebe a funcão que será executada toda vez que um arquivo for importado
selectedFiles é um array com as imagens selecionadas. É preciso inserir ele em um estado
com map, estamos retornando para o novo array "filePackage" um objeto
 
o método Object.assign recebe pelo menos duas propriedades, o primeiro será o objeto ALVO,
o segundo ou os demais serão os objetos atribuidos/atualizados no alvo. Se houver objetos com 
chaves repetidas, ele atualizará o alvo com a chave repetida mais próxima do parêntese final, se 
não houver, todas as chaves serão atribuidos ao objeto alvo. Funciona igual à atualização de
dados usando o spread operator.

O input inserido dentro da dropzone servirá para manipular os arquivos enviados e para validá-
los com Formik / Yup, por isso, ele recebe um "name" também. Nós enviamos os valores do nosso
input para o formik através da propriedade "setFieldValue", porque, neste caso, estamos usando
uma biblioteca de terceiros para manipular a dropzone. A propriedade recebe dois parâmetros:

ex: formik.setFieldValue('nomeDoInput', valorDoInput)

Se não estivermos utilizando validação, precisamos criar nosso próprio estado para gerenciar
a inserção de imagens:

ex: const [images, setImages] = useState([])

============= Comentários referentes ao uso do Formik, para validar formulários ==============

para usarmos a validação nativa do Formik, sem Yup, podemos proceder assim:

const validate = values => {
  const errors = {}

  if (!values.title) {
    errors.title = 'campo obrigatório!'
  }

  return errors
}

"validate" seria um campo necessário nas configurações do hook useFormik, substituindo "validationSchema"

========= Comentários referentes ao uso do Componente Toast através de um CONTEXTO ==========

Optamos por consumir o Componente Toast dessa forma, para que todas as páginas da nossa aplicação 
tivessem acesso a ele mais facilmente. Isso também permite que, mesmo que estejamos transitando entre 
uma página e outra, o toast não deixe de ser exibido, limitando-se a respeitar o tempo da função de
callback "onClose".

======================== Comentários referentes ao sistema de Login e Senha ========================

1 - Primeiro, importamos o componente "SessionProvider" e o reexportamos como um Componente client-side
e também com o nome de AuthProvider (sem alterar o nome, o re-export não irá funcionar)

2 - Inserimos o AuthProvider como um contexto que envolverá toda a nossa aplicação, através do arquivo 
"layout.js". Nosso provider precisa do parâmetro "session" para funcionar, esse parâmetro é fornecido 
por outro Componente do Next-Auth chamado "getServerSession", o qual deve ser transformado em um método 
assíncrono, através de uma variável. Ex: const session = await getServerSession()

3 - Dentro da pasta do diretório src/app/api/auth criamos um diretório dinâmico chamado [...nextauth] e
nele uma rota, essa rota conterá o handler "providers" que se encarregará de fazer o controle de login. 

4 - Para gerar uma chave segredo/token para o handler, digita-se no terminal: openssl rand -base64 X. 
Substituimos X pela quantidade de caracteres desejados para chave segredo.

5 - O Next-Auth também fornece 3 elementos importantes: "signIn", "signOut" e useSession. Os dois
primeiros são funções que realizam funções óbvias, elas controlam o handler, o terceiro nos dá acesso
a um objeto, com os dados de login do usuário ou, se não houver alguém logado, ele informará o estado
de login não realizado. 

6 - Ao chamar e função "signIn", os valores enviados como objeto para ela chegarão até a
// rota "NextAuth", que acionará o handler, antes deste ponto também é preciso informar qual 
handler queremos usar, ex: "authorize". O handler precisa fazer uma request para algum endpoint,
repassando para ele os valores de login que recebeu como objeto.

================== Comentários referentes à fetchData e componentes Páginas ===================
O "ideal" é que as páginas permaneçam sendo server-side components, assim, podemos ter páginas 
assíncronas e fazer fetch's assíncronos com segurança, a fim de repassar os dados obtidos para 
os componentes filhos, mesmo que estes sejam componentes client-side. É perfeitamente possível
importar componentes client-side dentro um componente server-side. Essa abordagem substituiu o 
antigos "getServerSideProps".

============= Comentários referentes à Inserção e Exclusão de items da base de dados ===========
Usamos a funcão revalidatePath(), ao adicionar e ao remover itens da base da dados, para atualizar o 
cache do next. Caso contrário, podemos ter problemas de items inseridos ou excluídos aparecendo apenas 
em rotas específicas.